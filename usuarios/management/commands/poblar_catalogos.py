from django.core.management.base import BaseCommand
from django.db import transaction
from usuarios.models import Instrumento, Genero, NivelExperiencia, Ubicacion


class Command(BaseCommand):
    help = 'Poblar cat√°logos con datos iniciales de instrumentos, g√©neros y ubicaciones'

    def add_arguments(self, parser):
        parser.add_argument(
            '--reset',
            action='store_true',
            help='Eliminar datos existentes antes de poblar'
        )
        parser.add_argument(
            '--categoria',
            type=str,
            choices=['instrumentos', 'generos', 'niveles', 'ubicaciones'],
            help='Poblar solo una categor√≠a espec√≠fica'
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üéµ Iniciando poblado de cat√°logos MeetAndGig...')
        )

        try:
            with transaction.atomic():
                if options['reset']:
                    self._reset_catalogos(options['categoria'])

                if not options['categoria'] or options['categoria'] == 'instrumentos':
                    self._poblar_instrumentos()
                
                if not options['categoria'] or options['categoria'] == 'generos':
                    self._poblar_generos()
                
                if not options['categoria'] or options['categoria'] == 'niveles':
                    self._poblar_niveles_experiencia()
                
                if not options['categoria'] or options['categoria'] == 'ubicaciones':
                    self._poblar_ubicaciones()

            self.stdout.write(
                self.style.SUCCESS('‚úÖ Cat√°logos poblados exitosamente')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Error poblando cat√°logos: {str(e)}')
            )
            raise

    def _reset_catalogos(self, categoria=None):
        self.stdout.write('üßπ Limpiando cat√°logos existentes...')
        
        if not categoria or categoria == 'instrumentos':
            Instrumento.objects.all().delete()
        if not categoria or categoria == 'generos':
            Genero.objects.all().delete()
        if not categoria or categoria == 'niveles':
            NivelExperiencia.objects.all().delete()
        if not categoria or categoria == 'ubicaciones':
            Ubicacion.objects.all().delete()

    def _poblar_instrumentos(self):
        self.stdout.write('üé∏ Poblando instrumentos...')
        
        instrumentos_data = {
            'Cuerdas': [
                'Guitarra Cl√°sica', 'Guitarra El√©ctrica', 'Guitarra Ac√∫stica',
                'Bajo El√©ctrico', 'Bajo Ac√∫stico', 'Viol√≠n', 'Viola', 'Violonchelo',
                'Contrabajo', 'Charango', 'Cuatro Venezolano', 'Mandolina',
                'Banjo', 'Ukulele'
            ],
            'Vientos': [
                'Flauta Traversa', 'Flauta Dulce', 'Clarinete', 'Saxof√≥n Alto',
                'Saxof√≥n Tenor', 'Trompeta', 'Tromb√≥n', 'Tuba', 'Corno Franc√©s',
                'Quena', 'Zampo√±a', 'Arm√≥nica', 'Oboe', 'Fagot'
            ],
            'Percusi√≥n': [
                'Bater√≠a', 'Caj√≥n Peruano', 'Congas', 'Bongos', 'Timbales',
                'Djembe', 'Bombo Leg√ºero', 'Pandero', 'Charango', 'Maracas',
                'Claves', 'G√ºiro', 'Campanas Tubulares', 'Xil√≥fono'
            ],
            'Teclas': [
                'Piano', 'Piano El√©ctrico', 'Teclado Sintetizador', '√ìrgano',
                'Acorde√≥n', 'Bandone√≥n', 'Clavec√≠n', 'Mel√≥dica'
            ],
            'Folclore Chileno': [
                'Guitarra Folcl√≥rica', 'Bombo Nortino', 'Kultrun', 'Trutruca',
                'Rabel', 'Tormento', 'Acorde√≥n de Botones'
            ]
        }

        created_count = 0
        for categoria, instrumentos in instrumentos_data.items():
            for nombre in instrumentos:
                instrumento, created = Instrumento.objects.get_or_create(
                    nombre=nombre,
                    defaults={'categoria': categoria}
                )
                if created:
                    created_count += 1

        self.stdout.write(f'  ‚û§ {created_count} instrumentos creados')

    def _poblar_generos(self):
        self.stdout.write('üé≠ Poblando g√©neros musicales...')
        
        generos_data = [
            {
                'nombre': 'Rock',
                'descripcion': 'G√©nero musical caracterizado por el uso de guitarras el√©ctricas, bajo y bater√≠a'
            },
            {
                'nombre': 'Pop',
                'descripcion': 'M√∫sica popular contempor√°nea con estructuras mel√≥dicas pegajosas'
            },
            {
                'nombre': 'Jazz',
                'descripcion': 'G√©nero musical que se caracteriza por la improvisaci√≥n y la complejidad arm√≥nica'
            },
            {
                'nombre': 'Blues',
                'descripcion': 'G√©nero musical vocal e instrumental basado en el uso de notas de blues'
            },
            {
                'nombre': 'Folclore Chileno',
                'descripcion': 'M√∫sica tradicional de Chile incluyendo cueca, tonada y vals chileno'
            },
            {
                'nombre': 'Nueva Canci√≥n',
                'descripcion': 'Movimiento musical latinoamericano de contenido social y pol√≠tico'
            },
            {
                'nombre': 'Cumbia',
                'descripcion': 'G√©nero musical y baile folcl√≥rico tradicional de Colombia'
            },
            {
                'nombre': 'Salsa',
                'descripcion': 'G√©nero musical bailable resultante de la s√≠ntesis del son cubano'
            },
            {
                'nombre': 'Reggae',
                'descripcion': 'G√©nero musical que se desarroll√≥ por primera vez en Jamaica'
            },
            {
                'nombre': 'Electr√≥nica',
                'descripcion': 'M√∫sica que emplea instrumentos musicales electr√≥nicos y tecnolog√≠a'
            },
            {
                'nombre': 'Cl√°sica',
                'descripcion': 'M√∫sica culta, m√∫sica cl√°sica, m√∫sica docta o m√∫sica erudita'
            },
            {
                'nombre': 'Bolero',
                'descripcion': 'G√©nero musical de origen cubano, muy popular en toda Am√©rica Latina'
            },
            {
                'nombre': 'Tango',
                'descripcion': 'G√©nero musical y danza nacida en Argentina y Uruguay'
            },
            {
                'nombre': 'Bossa Nova',
                'descripcion': 'G√©nero musical brasile√±o derivado del samba y influido por el jazz'
            },
            {
                'nombre': 'Reggaet√≥n',
                'descripcion': 'G√©nero musical procedente de Puerto Rico a finales de los a√±os 1990'
            }
        ]

        created_count = 0
        for genero_data in generos_data:
            genero, created = Genero.objects.get_or_create(
                nombre=genero_data['nombre'],
                defaults={'descripcion': genero_data['descripcion']}
            )
            if created:
                created_count += 1

        self.stdout.write(f'  ‚û§ {created_count} g√©neros creados')

    def _poblar_niveles_experiencia(self):
        self.stdout.write('üéì Poblando niveles de experiencia...')
        
        niveles_data = [
            {
                'nombre': 'Principiante',
                'descripcion': 'Menos de 2 a√±os de experiencia',
                'orden': 1,
                'a√±os_minimos': 0,
                'a√±os_maximos': 2
            },
            {
                'nombre': 'Intermedio',
                'descripcion': '2-5 a√±os de experiencia musical',
                'orden': 2,
                'a√±os_minimos': 2,
                'a√±os_maximos': 5
            },
            {
                'nombre': 'Avanzado',
                'descripcion': '5-10 a√±os de experiencia musical',
                'orden': 3,
                'a√±os_minimos': 5,
                'a√±os_maximos': 10
            },
            {
                'nombre': 'Profesional',
                'descripcion': 'M√°s de 10 a√±os, formaci√≥n acad√©mica o profesional',
                'orden': 4,
                'a√±os_minimos': 10,
                'a√±os_maximos': None
            }
        ]

        created_count = 0
        for nivel_data in niveles_data:
            nivel, created = NivelExperiencia.objects.get_or_create(
                nombre=nivel_data['nombre'],
                defaults={
                    'descripcion': nivel_data['descripcion'],
                    'orden': nivel_data['orden'],
                    'a√±os_minimos': nivel_data['a√±os_minimos'],
                    'a√±os_maximos': nivel_data['a√±os_maximos']
                }
            )
            if created:
                created_count += 1

        self.stdout.write(f'  ‚û§ {created_count} niveles de experiencia creados')

    def _poblar_ubicaciones(self):
        self.stdout.write('üìç Poblando ubicaciones...')
        
        ubicaciones_data = [
            # Regi√≥n Metropolitana
            {'nombre': 'Santiago', 'region': 'Regi√≥n Metropolitana', 'orden': 1},
            {'nombre': 'Las Condes', 'region': 'Regi√≥n Metropolitana', 'orden': 2},
            {'nombre': 'Providencia', 'region': 'Regi√≥n Metropolitana', 'orden': 3},
            {'nombre': '√ëu√±oa', 'region': 'Regi√≥n Metropolitana', 'orden': 4},
            {'nombre': 'Maip√∫', 'region': 'Regi√≥n Metropolitana', 'orden': 5},
            {'nombre': 'Puente Alto', 'region': 'Regi√≥n Metropolitana', 'orden': 6},
            
            # Valpara√≠so
            {'nombre': 'Valpara√≠so', 'region': 'Regi√≥n de Valpara√≠so', 'orden': 10},
            {'nombre': 'Vi√±a del Mar', 'region': 'Regi√≥n de Valpara√≠so', 'orden': 11},
            {'nombre': 'Quilpu√©', 'region': 'Regi√≥n de Valpara√≠so', 'orden': 12},
            
            # Concepci√≥n
            {'nombre': 'Concepci√≥n', 'region': 'Regi√≥n del Biob√≠o', 'orden': 20},
            {'nombre': 'Talcahuano', 'region': 'Regi√≥n del Biob√≠o', 'orden': 21},
            {'nombre': 'Chill√°n', 'region': 'Regi√≥n del Biob√≠o', 'orden': 22},
            
            # Otras regiones principales
            {'nombre': 'La Serena', 'region': 'Regi√≥n de Coquimbo', 'orden': 30},
            {'nombre': 'Antofagasta', 'region': 'Regi√≥n de Antofagasta', 'orden': 40},
            {'nombre': 'Temuco', 'region': 'Regi√≥n de La Araucan√≠a', 'orden': 50},
            {'nombre': 'Puerto Montt', 'region': 'Regi√≥n de Los Lagos', 'orden': 60},
        ]

        created_count = 0
        for ubicacion_data in ubicaciones_data:
            ubicacion, created = Ubicacion.objects.get_or_create(
                nombre=ubicacion_data['nombre'],
                defaults={
                    'region': ubicacion_data['region'],
                    'orden': ubicacion_data['orden'],
                    'pais': 'Chile',
                    'activo': True
                }
            )
            if created:
                created_count += 1

        self.stdout.write(f'  ‚û§ {created_count} ubicaciones creadas')
